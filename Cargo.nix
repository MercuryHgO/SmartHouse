# This file was @generated by cargo2nix 0.11.0.
# It is not intended to be manually edited.

args@{
  release ? true,
  rootFeatures ? [
    "fire_alarm/default"
    "gauge/default"
    "server/default"
    "temperature_gauge/default"
    "house_layout/default"
  ],
  rustPackages,
  buildRustPackages,
  hostPlatform,
  hostPlatformCpu ? null,
  hostPlatformFeatures ? [],
  target ? null,
  codegenOpts ? null,
  profileOpts ? null,
  cargoUnstableFlags ? null,
  rustcLinkFlags ? null,
  rustcBuildFlags ? null,
  mkRustCrate,
  rustLib,
  lib,
  workspaceSrc,
  ignoreLockHash,
}:
let
  nixifiedLockHash = "626a9df6f8e7ae645141b9c58eb05923a22a751ae375961f3f437fcff6a4a0e7";
  workspaceSrc = if args.workspaceSrc == null then ./. else args.workspaceSrc;
  currentLockHash = builtins.hashFile "sha256" (workspaceSrc + /Cargo.lock);
  lockHashIgnored = if ignoreLockHash
                  then builtins.trace "Ignoring lock hash" ignoreLockHash
                  else ignoreLockHash;
in if !lockHashIgnored && (nixifiedLockHash != currentLockHash) then
  throw ("Cargo.nix ${nixifiedLockHash} is out of sync with Cargo.lock ${currentLockHash}")
else let
  inherit (rustLib) fetchCratesIo fetchCrateLocal fetchCrateGit fetchCrateAlternativeRegistry expandFeatures decideProfile genDrvsByProfile;
  profilesByName = {
  };
  rootFeatures' = expandFeatures rootFeatures;
  overridableMkRustCrate = f:
    let
      drvs = genDrvsByProfile profilesByName ({ profile, profileName }: mkRustCrate ({ inherit release profile hostPlatformCpu hostPlatformFeatures target profileOpts codegenOpts cargoUnstableFlags rustcLinkFlags rustcBuildFlags; } // (f profileName)));
    in { compileMode ? null, profileName ? decideProfile compileMode release }:
      let drv = drvs.${profileName}; in if compileMode == null then drv else drv.override { inherit compileMode; };
in
{
  cargo2nixVersion = "0.11.0";
  workspace = {
    fire_alarm = rustPackages.unknown.fire_alarm."0.1.0";
    gauge = rustPackages.unknown.gauge."0.1.0";
    server = rustPackages.unknown.server."0.1.0";
    temperature_gauge = rustPackages.unknown.temperature_gauge."0.1.0";
    house_layout = rustPackages.unknown.house_layout."0.1.0";
  };
  "unknown".fire_alarm."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "fire_alarm";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      gauge = (rustPackages."unknown".gauge."0.1.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".gauge."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "gauge";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      json_minimal = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".json_minimal."0.1.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".house_layout."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "house_layout";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      gauge = (rustPackages."unknown".gauge."0.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".json_minimal."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "json_minimal";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5f23a154c7bbe06d65d084a909a7ba16981b514768c5b79ccf423dda1e4b4d8e"; };
  });
  
  "unknown".server."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "server";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      gauge = (rustPackages."unknown".gauge."0.1.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".temperature_gauge."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "temperature_gauge";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      gauge = (rustPackages."unknown".gauge."0.1.0" { inherit profileName; }).out;
    };
  });
  
}
